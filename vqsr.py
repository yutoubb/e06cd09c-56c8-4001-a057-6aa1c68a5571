import re, os, sys
from l3sdk import define, Process, require

@require(mem_mb=6000, cpu=require.CPU_SINGLE, high_io=True, disk_space_gb=200)

class GATK_VQSR(define.Wrapper):
    class Inputs(define.Inputs):
        In_vcf = define.input(name="Input VCF file", description="Input VCF file", required=True, list=False)
        In_vcf_tbi = define.input("Input TBI file", description= "Index file for VCF",required=False,list=False)
        Reference =define.input(name = "Reference", description = "Reference sequence in FASTA format.",required = False, list=False)
        resource_hapmap = define.input(name = "-resource:hapmap(for SNP VQSR)",description = "Hapmap sites for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run).",required = False,list = False)
        resource_omni = define.input(name = "-resource:ommi(for SNP VQSR)",description = "1000G Omni sites for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run).",required = False,list = False)
        resource_1000G = define.input(name = "-resource:1000G(for SNP VQSR)",description = "1000G SNPs for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run).",required = False,list = False)
        resource_dbsnp = define.input(name = "-resource:dbsnp(for SNP VQSR)",description = "DbSNP sites for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run).",required = False,list = False)  
        resource_mills = define.input(name = "-resource:mills(for InDel VQSR)",description = "Mills_and_1000G_gold_standard indels for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run).",required = False,list = False)

    class Outputs(define.Outputs):
        Out_raw_vcf = define.output(name="Raw vcf output", description="Raw vcf file.", required=False, list=False)
        Out_recalFile = define.output(name="Output recal file", description="The output recal file used by ApplyRecalibration.",required=False,list=False)    
        Out_tranchesFile =define.output(name="Output tranches file",description="The output tranches file used by ApplyRecalibration.",required=False,list=False)
        Out_rscriptFile = define.output(name="Output rscript file",description="The output rscript file generated by the VQSR to aid in visualization of the input data and learned model.",required=False,list=False)
        Out_vcf = define.output(name="Filtered VCF file",description="Filtered VCF file.",required=False,list=False)

    class Params(define.Params):
        #ExcludeNonVariants = define.string(name="ExcludeNonVariants", description="Don't include non-variant sites.", required=True,default = "excludeNonVariants")
        #SelectType= define.string(name = "SelectType", description = "Select only a certain type of variants from the input file.Valid types are INDEL,SNP,MIXED,MNP,SYMBOLIC,NO_VARIATION.",required = True,default = 'SNP')
	SelectType= define.enum([(u'SNP',u'SNP',u'SNP'),(u'INDEL',u'INDEL',u'INDEL'),(u'MIXED',u'MIXED',u'MIXED'),(u'MNP',u'MNP',u'MNP'),(u'SYMBOLIC',u'SYMBOLIC',u'SYMBOLIC'),(u'NO_VARIATION',u'NO_VARIATION',u'NO_VARIATION')],name = "SelectType", description = "Select only a certain type of variants from the input file.Valid types are INDEL,SNP,MIXED,MNP,SYMBOLIC,NO_VARIATION.",required = True,default = 'SNP')
        Resource_hapmap = define.string(name="Resource_hapmap",description="Hapmap sites for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run.",required = False,default = 'hapmap,known=false,training=true,truth=true,prior=15.0')
        Resource_omni = define.string(name="Resource_omni",description="Omni sites for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run).",required = False,default = 'omni,known=false,training=true,truth=true,prior=12.0')
        Resource_1000G = define.string(name="Resource_1000G",description="1000G sites for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run).",required = False,default = '1000G,known=false,training=true,truth=false,prior=10.0')
        Resource_dbsnp = define.string(name="Resource_dbsnp",description="Dbsnp sites for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run).",required = False,default = 'dbsnp,known=true,training=false,truth=false,prior=2.0')
        Resource_Indel_mills = define.string(name="Resource_mills",description = "Mills sites for which to apply a prior probability of being correct but which aren't used by the algorithm (training and truth sets are required to run).",required = False,default ='mills,known=true,training=true,truth=true,prior=12.0') 
        An = define.string(name="The names of the annotations",description="The names of the annotations which should used for calculations.Format:[value1],[value2],[value3],...",required = True,default = "DP,QD,FS,SOR,MQ,MQRankSum,ReadPosRankSum")
        MaxGaussians = define.integer(name="MaxGaussians",description="Max number of Gaussians for the positive model",required=False,default=8)
        Mode = define.enum([(u'SNP',u'SNP',u'SNP'),(u'INDEL',u'INDEL',u'INDEL'),(u'BOTH',u'BOTH',u'BOTH')],name="Mode",description="Recalibration mode to employ",required = True,default = "SNP")
        Tranche = define.string(name="Tranche",description="The levels of truth sensitivity at which to slice the data. (in percent, that is 1.0 for 1 percent)",required = False,default = "100.0,99.9,99.0,90.0") 
        Ts_filter_level = define.real(name="Ts_filter_level",description = "The truth sensitivity level at which to start filtering.",required = False,default =99.0 )   
        #ExcludeFiltered = define.string(name="ExcludeFiltered",description = "Don't include filtered sites.",required = False,default = "excludeFiltered")
        rename = define.string(name = 'Rename prefix', description = "Rename the output file as [PREFIX].vcf If a metadata key is given as prefix, the output file will be renamed with the corresponding metadata value of the first input file.", required = False, default = '')
        cmd_SelectVariants = define.string(name="Extra options 1", description="Advanced command line for SelectVariants.", required=False, default="")
        cmd_VariantRecalibrator = define.string(name="Extra options 2", description="Advanced command line for VariantRecalibrator.", required=False, default="")
        cmd_ApplyRecalibration = define.string(name="Extra options 3", description="Advanced command line for ApplyRecalibration.", required=False, default="")
        cmd_SelectVariants1 = define.string(name="Extra options 4", description="Advanced command line for SelectVariants.", required=False, default="")

    def execute(self):
        if self.params.rename :
            if self.params.rename in self.inputs.In_vcf.meta:
                prefix = self.inputs.In_vcf.meta.get(self.params.rename)
            else:
                prefix = self.params.rename
            prefix.replace(" ","");
            rstr = r"[\/\\\:\*\?\'\"\<\>\|]"  # '/\:*?"<>|'
            prefix = re.sub(rstr, "", prefix)
        else:
            vcf_name = os.path.basename(self.inputs.In_vcf) 
            if (os.path.splitext(self.inputs.In_vcf)[1]==".gz"):
                name = os.path.splitext(vcf_name)[0]
                prefix = os.path.splitext(name)[0]
            else:
                prefix = os.path.splitext(vcf_name)[0]
		
        out_raw_vcf = prefix +'.raw.'+ self.params.SelectType.lower() +'.vcf.gz'
        out_recal = prefix +'.recalibrate_'+ self.params.SelectType.lower() +'.recal'
        out_tranches = prefix +'.recalibrate_'+ self.params.SelectType.lower() +'.tranches'
        out_rscript = prefix +'.recalibrate_'+ self.params.SelectType.lower() +'_plots.R' 
        out_vcf = prefix +'.'+ self.params.SelectType.lower() +'.vcf.gz'

#step1(SelectVariants):
        content = "java -Xmx5G -Djava.io.tmpdir=./java_tmp -jar /opt/bin/GenomeAnalysisTK.jar -T SelectVariants -R " 

        if(self.inputs.Reference):
           if (os.path.splitext(self.inputs.Reference)[1]==".gz"):
                   Process("gunzip",self.inputs.Reference).run()
                   fa=os.path.splitext(self.inputs.Reference)[0]
           else:
               fa=self.inputs.Reference

        fai = fa+".fai"
        if (os.path.isfile(fai)):
                pass
        else:
                Process('/opt/bin/samtools-1.3/samtools','faidx',fa).run()
        fa_dict = os.path.splitext(fa)[0] + '.dict'
        if (os.path.isfile(fa_dict)):
                pass
        else:
                Process('/opt/bin/samtools-1.3/samtools','dict',fa,'-o',fa_dict).run()
        
        tbi = self.inputs.In_vcf + ".tbi"
        if (os.path.isfile(tbi)):
                pass
        else:
               Process('/opt/bin/htslib-1.3/tabix',self.inputs.In_vcf).run() 
        content += fa + " -V " + self.inputs.In_vcf + " -selectType " + self.params.SelectType        
        
        #if(self.params.ExcludeNonVariants):
         #  content += " --" + self.params.ExcludeNonVariants
        if(self.params.cmd_SelectVariants):
           content += " " + self.params.cmd_SelectVariants
        content += " -o " + out_raw_vcf + " && \\\n"
 
#step2(VariantRecalibrator):
        content += "java -Xmx5G -Djava.io.tmpdir=./java_tmp -jar /opt/bin/GenomeAnalysisTK.jar -T VariantRecalibrator -R " + fa + " -input " + out_raw_vcf + " \\\n"

        if(self.inputs.In_resource_hapmap):
           if (os.path.splitext(self.inputs.In_resource_hapmap)[1]==".gz"):
                   Process("gunzip",self.inputs.In_resource_hapmap).run()
                   hapmap=os.path.splitext(self.inputs.In_resource_hapmap)[0]
           else:
               hapmap=self.inputs.In_resource_hapmap

#           hapmapidx = hapmap +".idx"
#           if (os.path.isfile(hapmapidx)):
#                   pass
#           else:
#                   Process('/opt/bin/htslib-1.3/tabix',hapmap).run()

           if(self.params.Resource_hapmap):
                content += "-resource:" + self.params.Resource_hapmap + " " + hapmap+ " \\\n"

        if(self.inputs.In_resource_omni):
           if (os.path.splitext(self.inputs.In_resource_omni)[1]==".gz"):
                   Process("gunzip",self.inputs.In_resource_omni).run()
                   omni=os.path.splitext(self.inputs.In_resource_omni)[0]
           else:
               omni=self.inputs.In_resource_omni

#           omniidx = omni +".idx"
#           if (os.path.isfile(omniidx)):
#                   pass
#           else:
#                   Process('/opt/bin/htslib-1.3/tabix',omniidx).run()
           if(self.params.Resource_omni):
                   content += "-resource:" + self.params.Resource_omni + " " + omni + " \\\n"

        if(self.inputs.In_resource_1000G):
           if (os.path.splitext(self.inputs.In_resource_1000G)[1]==".gz"):
                   Process("gunzip",self.inputs.In_resource_1000G).run()
                   G=os.path.splitext(self.inputs.In_resource_1000G)[0]
           else:
               G=self.inputs.In_resource_1000G

#           Gidx = G +".idx"
#           if (os.path.isfile(Gidx)):
#                   pass
#           else:
#                   Process('/opt/bin/htslib-1.3/tabix',G).run()

           if(self.params.Resource_1000G):
                   content += "-resource:" + self.params.Resource_1000G + " " + G + " \\\n"

        if(self.inputs.In_resource_dbsnp):
           if (os.path.splitext(self.inputs.In_resource_dbsnp)[1]==".gz"):
                   Process("gunzip",self.inputs.In_resource_dbsnp).run()
                   dbsnp=os.path.splitext(self.inputs.In_resource_dbsnp)[0]
           else:
               dbsnp=self.inputs.In_resource_dbsnp

#           dbsnpidx = dbsnp +".idx"
#           if (os.path.isfile(dbsnpidx)):
#                   pass
#           else:
#                   Process('/opt/bin/htslib-1.3/tabix',dbsnp).run()

           if(self.params.Resource_dbsnp):
                   content += "-resource:" + self.params.Resource_dbsnp + " " + dbsnp + " \\\n"

        if(self.inputs.In_resource_mills):
           if (os.path.splitext(self.inputs.In_resource_mills)[1]==".gz"):
                   Process("gunzip",self.inputs.In_resource_mills).run()
                   mills=os.path.splitext(self.inputs.In_resource_mills)[0]
           else:
               mills=self.inputs.In_resource_mills
           if(self.params.Resource_mills):
                   content += "-resource:" + self.params.Resource_mills + " " + mills + " \\\n"


        if(self.params.An):
            for an in self.params.An.split(","): 
                content += " -an " + an

        content += " -mode " + self.params.Mode 
        if(self.params.Tranche): 
            for tranche in self.params.Tranche.split(","):
                content += " -tranche " + tranche
        if(self.params.MaxGaussians):
            content += " --maxGaussians " + str(self.params.MaxGaussians)

        content += " \\\n"
        content += "-recalFile " + out_recal 
        content += " -tranchesFile " + out_tranches
        if(self.params.cmd_VariantRecalibrator):
            content += " " + self.params.cmd_VariantRecalibrator 
        content += " -rscriptFile " + out_rscript + " && \\\n" 


#step3(ApplyRecalibration):

        content += "java -Xmx5G -Djava.io.tmpdir=./java_tmp -jar /opt/bin/GenomeAnalysisTK.jar -T ApplyRecalibration -R " + fa + " -input " + out_raw_vcf + " -mode " + self.params.Mode 
        if(self.params.Ts_filter_level):
            content += " --ts_filter_level " + str(self.params.Ts_filter_level)

        if(self.params.cmd_ApplyRecalibration):
            content += " " + self.params.cmd_ApplyRecalibration
        content += " -recalFile " + out_recal + " -tranchesFile " + out_tranches + " -o  out_snp.vcf.gz && \\\n"

#step4(SelectVariants2):

        content += "java -Xmx5G -Djava.io.tmpdir=./java_tmp -jar /opt/bin/GenomeAnalysisTK.jar -T SelectVariants -R " + fa + " -V out_snp.vcf.gz "

        #if(self.params.ExcludeFiltered):
         #  content += " --" + self.params.ExcludeFiltered
           
        content += " -o " + out_vcf + " \n "


        sys.stdout.write(content)
        f = open("VQSR.sh","w")
        f.write(content)
        f.close()

        Process("sh","VQSR.sh").run()

#        Process('mv',"output_CNV",out_CNV).run()

        self.outputs.Out_raw_vcf = out_raw_vcf
        self.outputs.Out_recalFile = out_recal
        self.outputs.Out_tranchesFile = out_tranches
        self.outputs.Out_rscriptFile = out_rscript  
        self.outputs.Out_vcf = out_vcf

        d = "result/" + prefix + "/result_variation/" +  self.params.SelectType.lower()

        self.outputs.Out_raw_vcf.meta = self.inputs.In_vcf.make_metadata(url=d)
        self.outputs.Out_recalFile.meta = self.inputs.In_vcf.make_metadata(url=d)
        self.outputs.Out_tranchesFile.meta = self.inputs.In_vcf.make_metadata(url=d)
        self.outputs.Out_rscriptFile.meta = self.inputs.In_vcf.make_metadata(url=d)
        self.outputs.Out_vcf.meta = self.inputs.In_vcf.make_metadata (url=d)

   
